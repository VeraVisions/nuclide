/*
 * Copyright (c) 2016-2022 Vera Visions LLC.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

#ifdef MENU
enumflags
{
	MBUTTON_SHOWOFFLINE = BUTTON_CUSTOMFLAGS,
	MBUTTON_SHOWSP,
	MBUTTON_SHOWMP
};

.void(void) tmpVGUIMenuButton1;

/** VGUI Widget: Menu Button

@ingroup vgui
*/
class
VGUIMenuButton: VGUIButton
{
public:
	void VGUIMenuButton(void);


	virtual void Draw(void);
	virtual bool Input(float, float, float, float);
	virtual void Spawned(void);
};

void
VGUIMenuButton::VGUIMenuButton(void)
{
}

void
VGUIMenuButton::Spawned(void)
{
	super::Spawned();
	FlagAdd(MBUTTON_SHOWOFFLINE | MBUTTON_SHOWSP | MBUTTON_SHOWMP);
}

void
VGUIMenuButton::Draw(void)
{
	// If we're not ingame
	if (clientstate() == 2 && !g_background) {
		if (!(m_iFlags & MBUTTON_SHOWSP)) {
			return;
		}
	} else {
		if (!(m_iFlags & MBUTTON_SHOWOFFLINE)) {
			return;
		}
	}

	super::Draw();
}

bool
VGUIMenuButton::Input (float flEVType, float flKey, float flChar, float flDevID)
{
	// If we're not ingame
	if (clientstate() == 2 && !g_background) {
		if (!(m_iFlags & MBUTTON_SHOWSP)) {
			return false;
		}
	} else {
		if (!(m_iFlags & MBUTTON_SHOWOFFLINE)) {
			return false;
		}
	}

	return super::Input(flEVType, flKey, flChar, flDevID);
}

#endif
